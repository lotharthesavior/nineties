use crate::helpers::load_template;
use actix_web::{get, web, HttpResponse, Responder};
use crate::AppState;
use crate::controllers::home_controller;

#[get("/")]
pub async fn {{ controller_name }}(data: web::Data<AppState>) -> impl Responder {
    HttpResponse::Ok().body(load_template("{{ controller_name }}.html", vec![("name", &data.app_name)]))
}

#[cfg(test)]
mod tests {
    use actix_web::{http, test, App};
    use crate::{AppState};
    use super::*;

    #[actix_web::test]
    async fn test_home() {
        let app = test::init_service(
            App::new()
                .app_data(web::Data::new(AppState {
                    app_name: String::from("My App Name"),
                }))
                .service(home_controller::home)
        ).await;

        let req = test::TestRequest::get().uri("/").to_request();
        let resp = test::call_service(&app, req).await;
        assert_eq!(resp.status(), http::StatusCode::OK);
    }
}